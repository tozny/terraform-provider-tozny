###
# Prerequisites & Setup
#
# A PAM Jira Plugin requires an MPC-enabled realm. This section sets up the runtime & tozny provider
# and creates a realm we can work with.
###

# Configure the Terraform runtime
terraform {
  required_version = ">= 0.14"
  required_providers {
    tozny = {
      # Pull signed provider binaries from the Terraform hosted registry namespace
      # for Tozny registry.terraform.io/tozny
      source = "tozny/tozny"
      # Pin Tozny provider version
      version = ">=0.14.0"
    }
  }
}

# Include the Tozny Terraform provider
provider "tozny" {
  api_endpoint     = "http://platform.local.tozny.com:8000"
  account_username = "test-emails-group+${random_string.account_username_salt.result}@tozny.com"
}

# Generate a random string for use in creating
# accounts across environments or executions conflict free
resource "random_string" "account_username_salt" {
  length  = 8
  special = false
}

# Generate a random string for use in creating
# realms across environments or executions conflict free
resource "random_string" "random_realm_name" {
  length  = 8
  special = false
}

# Local variables for defining where to store and find local Tozny client credentials
locals {
  tozny_client_credentials_filepath = "./tozny_client_credentials.json"
}

# A resource for provisioning a Tozny account using Terraform generated
# credentials that are saved to user specified filepath for reuse upon success.
resource "tozny_account" "autogenerated_tozny_account" {
  autogenerate_account_credentials = true
  persist_credentials_to           = "file"
  client_credentials_save_filepath = local.tozny_client_credentials_filepath
}

# A resource for provisioning a TozID Realm
# using local file based credentials for a Tozny Client with permissions to manage Realms.
resource "tozny_realm" "my_organizations_realm" {
  # Block on and use client credentials generated from the provisioned account
  depends_on = [
    tozny_account.autogenerated_tozny_account,
  ]
  client_credentials_filepath = local.tozny_client_credentials_filepath
  realm_name                  = random_string.random_realm_name.result
  sovereign_name              = "Administrator"
  mpc_enabled                 = true # <-- important! we need MPC for our realm.
}

###
# Managing your PAM Jira Plugin
#
# Once we have a realm, we can create a PAM Jira Plugin. This is the entity that allows
# communication between TozID and Jira.
###

# Never commit your Jira API Key to source control.
# To avoid this we create three variables pulled from the environment.
# The names of the env variables should be prefixed with "TF_VAR_" when set in the shell.
# If not set, terraform will prompt you for the values.

# The Jira Host URL
# export TF_VAR_JIRA_HOST_URL="tozid.atlassian.net"
variable "JIRA_HOST_URL" {
  description = "The host URL of the Jira instance."
  type        = string
}

# User email of the Jira user that acts on behalf of TozID
# export TF_VAR_JIRA_USER_EMAIL="test-emails-group+jirauser@tozny.com"
variable "JIRA_USER_EMAIL" {
  description = "The email of the TozID Automated Jira User."
  type        = string
}

# The API Key generated by Jira for the above user
# export TF_VAR_JIRA_USER_API_KEY="my-super-secret-api-key-from-jira"
variable "JIRA_USER_API_KEY" {
  description = "The API key of the TozID Automated Jira User."
  type        = string
  sensitive   = true # mark as sensitive so it never appears in logs
}

# A resource for provisioning a PAM Jira Plugin
resource "tozny_pam_jira_plugin" "my_pam_jira_integration_plugin" {
  # PAM plugins live in realms, so wait for the realm to exist before continuing
  # this also means we have our autogenerated credentials
  depends_on = [
    tozny_realm.my_organizations_realm,
  ]
  client_credentials_filepath = local.tozny_client_credentials_filepath
  realm_name                  = tozny_realm.my_organizations_realm.realm_name
  jira_host_url               = var.JIRA_HOST_URL
  jira_bot_user_email         = var.JIRA_USER_EMAIL
  jira_bot_user_api_key       = var.JIRA_USER_API_KEY
}
